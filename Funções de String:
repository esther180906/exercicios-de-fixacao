create database aula_20230817;
use aula_20230817;
                                                                        
CREATE TABLE nomes (
    nome VARCHAR(255)
);

INSERT INTO nomes (nome) VALUES
    ('Roberta'),
    ('Roberto'),
    ('Maria Clara'),
    ('João');

SELECT UPPER(nome) AS nome_maiusculo
FROM nomes;

SELECT nome, LENGTH(nome) AS tamanho
FROM nomes;

SELECT
    CASE
        WHEN nome LIKE '%João%' OR nome LIKE '%Roberto%' THEN CONCAT('Sr. ', nome)
        WHEN nome LIKE '%Maria%' THEN CONCAT('Sra. ', nome)
        ELSE nome
    END AS nome_com_prefixo
FROM nomes;

CREATE TABLE produtos (
    produto VARCHAR(255),
    preco DECIMAL(10, 2),
    quantidade INT
);

INSERT INTO produtos (produto, preco, quantidade) VALUES
    ('banana', 2.89, 5),
    ('maca', 12.30, 10),
    ('Pao', 7.89, 3);

SELECT produto, ROUND(preco, 2) AS preco_arredondado FROM produtos;

SELECT produto, ABS(quantidade) AS quantidade_absoluta FROM produtos;

SELECT AVG(preco) AS media_precos FROM produtos;

CREATE TABLE eventos (
    data_evento DATE
);

INSERT INTO eventos (data_evento) VALUES
    ('10-01-2023'),
    ('10-05-2023'),
    ('10-10-2023'),
    ('10-15-2023');

INSERT INTO eventos (data_evento) VALUES (NOW());

SELECT data_evento, DATEDIFF(NOW(), data_evento) AS dias_passados FROM eventos;

SELECT data_evento, DAYNAME(data_evento) AS dia_semana FROM eventos;

SELECT produto, quantidade,
    IF(quantidade > 0, 'Em estoque', 'Fora de estoque') AS status_estoque
FROM produtos;

SELECT produto, preco,
    CASE
        WHEN preco < 10.00 THEN 'Barato'
        WHEN preco >= 10.00 AND preco <= 20.00 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;

DELIMITER //

CREATE FUNCTION TOTAL_VALOR(preco DECIMAL(10, 2), quantidade INT)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total DECIMAL(10, 2);
    SET total = preco * quantidade;
    RETURN total;
END;
//
DELIMITER ;

SELECT produto, preco, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total
FROM produtos;


SELECT COUNT(*) AS numero_total_de_produtos FROM produtos;
SELECT produto, MAX(preco) AS produto_mais_caro FROM produtos;
SELECT produto, MIN(preco) AS produto_mais_barato FROM produtos;
SELECT SUM(IF(quantidade > 0, preco, 0)) AS soma_total_em_estoque FROM produtos;

DELIMITER //
CREATE FUNCTION FATORIAL(numero INT)
RETURNS INT
BEGIN
    DECLARE resultado INT;
    SET resultado = 1;
    WHILE numero > 0 DO
        SET resultado = resultado * numero;
        SET numero = numero - 1;
    END WHILE;
    RETURN resultado;
END;
//
DELIMITER ;

DELIMITER //
CREATE FUNCTION f_exponencial(base DECIMAL(10, 2), expoente INT)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE resultado DECIMAL(10, 2);
    SET resultado = 1;
    WHILE expoente > 0 DO
        SET resultado = resultado * base;
        SET expoente = expoente - 1;
    END WHILE;
    RETURN resultado;
END;
//
DELIMITER ;

DELIMITER //
CREATE FUNCTION is_palindromo(palavra VARCHAR(255))
RETURNS INT
BEGIN
    DECLARE reverso VARCHAR(255);
    SET reverso = REVERSE(palavra);
    IF palavra = reverso THEN
        RETURN 1; -- É um palíndromo
    ELSE
        RETURN 0; -- Não é um palíndromo
    END IF;
END;
//
DELIMITER ;
